name: Windows build

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: binary/projects/vs2022/Aura.sln
  VS_FILE_PATH: binary/projects/vs2022

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build-windows-dll-binary:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build aura.dll
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    #- name: Package aura.dll
      #run: |
        #New-Item -Force -ItemType Directory @("$env:TEMP\release","$env:TEMP\release\valve")
        #Copy-Item -Force binary/projects/vs2019/Release/auradll/aura.dll $env:TEMP/release/valve
        #Compress-Archive -LiteralPath $env:TEMP\release -DestinationPath .\aura-dll.zip -Force
    #- name: Upload aura.dll
      #uses: actions/upload-artifact@v2.2.4
      #with:
       # Artifact name
       #name: aura dll
       #path: ./aura-dll.zip
